// ==SE_module==
// name: scheduled_messages
// displayName: Scheduled Messages
// description: A Script That Allows For Scheduling Messages and Recurring Messages. Please don't remove Snapchat from the background when your message is scheduled.
// version: 2.5
// author: Suryadip Sarkar
// credits: rhunk & Jacob Thomas
// minSEVersion: Versions after 20/08/24
// ==/SE_module==

var messaging = require("messaging");
var im = require("interface-manager");
var config = require("config");

(function () {
  'use strict';

  function getAuthorToastCurrentTime() {
    return new Date().getTime();
  }

  function shouldShowAuthorToast() {
    var currentTime = getAuthorToastCurrentTime();
    var nextAuthorToastTime = config.getLong("nextAuthorToastTime", 0); 

    if (currentTime >= nextAuthorToastTime || nextAuthorToastTime === 0) {
        var oneDayInMillis = 24 * 60 * 60 * 1000;
        config.setLong("nextAuthorToastTime", currentTime + oneDayInMillis, true);
        return true;
    }
    return false;
  }

  function showAuthorStartupToast() {
    if (shouldShowAuthorToast()) {
        shortToast("Made by Suryadip Sarkar");
    }
  }

  var inputMessage = "";
  var customScheduleTime = "";
  var conversationId = null;
  var scheduledMessages = [];
  var recurringMessage = "";
  var recurringInterval = "daily";
  var isRecurringScheduleActive = false;

  var selectedLanguageKey = "selectedLanguage";
  var selectedLanguage = config.get(selectedLanguageKey, 'en');

  var translations = {
    en: {
      enterMessage: "Enter your message",
      customSchedule: "Custom Schedule (DD M YYYY HH MM)",
      recurringMessage: "Recurring Message",
      interval: "Interval",
      schedule1m: "Schedule (1m)",
      schedule5m: "Schedule (5m)",
      schedule30m: "Schedule (30m)",
      schedule1h: "Schedule (1h)",
      customScheduleBtn: "‚è∞ Custom Schedule",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ Recurring Schedule",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "Please enter a message",
      pleaseEnterBoth: "Please enter both a message and a custom schedule time",
      allCancelled: "All scheduled messages have been canceled.",
      noScheduled: "No messages currently scheduled.",
      pleaseEnterRecurring: "Please enter a recurring message",
      recurringStarted: "Recurring schedule started: ",
      recurringCancelled: "Recurring schedule cancelled",
      noActiveRecurring: "No active recurring schedule to cancel",
      daily: "Daily",
      weekly: "Weekly",
      monthly: "Monthly",
      invalidDateTime: "Invalid date/time format. Please use 'DD M YYYY HH MM'",
      pastDateTime: "The specified time is in the past. Please choose a future time.",
      scheduledFor: "Message scheduled for ",
      attemptingSend: "Attempting to send message: ",
      errorSending: "Error sending message: ",
      messageSent: "Message sent successfully",
      language: "Language"
    },
    pt: {
      enterMessage: "Digite sua mensagem",
      customSchedule: "Agendamento Personalizado (DD M YYYY HH MM)",
      recurringMessage: "Mensagem Recorrente",
      interval: "Intervalo",
      schedule1m: "Agendar (1m)",
      schedule5m: "Agendar (5m)",
      schedule30m: "Agendar (30m)",
      schedule1h: "Agendar (1h)",
      customScheduleBtn: "‚è∞ Agendamento Personalizado",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ Agendar Recorrente",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "Por favor, digite uma mensagem",
      pleaseEnterBoth: "Por favor, digite uma mensagem e um hor√°rio de agendamento personalizado",
      allCancelled: "Todas as mensagens agendadas foram canceladas.",
      noScheduled: "N√£o h√° mensagens agendadas no momento.",
      pleaseEnterRecurring: "Por favor, digite uma mensagem recorrente",
      recurringStarted: "Agendamento recorrente iniciado: ",
      recurringCancelled: "Agendamento recorrente cancelado",
      noActiveRecurring: "N√£o h√° agendamento recorrente ativo para cancelar",
      daily: "Di√°rio",
      weekly: "Semanal",
      monthly: "Mensal",
      invalidDateTime: "Formato de data/hora inv√°lido. Use 'DD M YYYY HH MM'",
      pastDateTime: "O hor√°rio especificado est√° no passado. Escolha um hor√°rio futuro.",
      scheduledFor: "Mensagem agendada para ",
      attemptingSend: "Tentando enviar mensagem: ",
      errorSending: "Erro ao enviar mensagem: ",
      messageSent: "Mensagem enviada com sucesso",
      language: "Idioma"
    },
    pa: {
      enterMessage: "‡®Ü‡®™‡®£‡®æ ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
      customSchedule: "‡®ï‡®∏‡®ü‡®Æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ (DD M YYYY HH MM)",
      recurringMessage: "‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡©Å‡®®‡©á‡®π‡®æ",
      interval: "‡®Ö‡©∞‡®§‡®∞‡®æ‡®≤",
      schedule1m: "‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ (1‡®Æ‡®ø‡©∞‡®ü)",
      schedule5m: "‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ (5‡®Æ‡®ø‡©∞‡®ü)",
      schedule30m: "‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ (30‡®Æ‡®ø‡©∞‡®ü)",
      schedule1h: "‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ (1‡®ò‡©∞‡®ü‡®æ)",
      customScheduleBtn: "‚è∞ ‡®ï‡®∏‡®ü‡®Æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ ‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®á‡©±‡®ï ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
      pleaseEnterBoth: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®á‡©±‡®ï ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®Ö‡®§‡©á ‡®á‡©±‡®ï ‡®ï‡®∏‡®ü‡®Æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ ‡®∏‡®Æ‡®æ‡®Ç ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
      allCancelled: "‡®∏‡®æ‡®∞‡©á ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®§ ‡®∏‡©Å‡®®‡©á‡®π‡©á ‡®∞‡©±‡®¶ ‡®ï‡®∞ ‡®¶‡®ø‡©±‡®§‡©á ‡®ó‡®è ‡®π‡®®‡•§",
      noScheduled: "‡®á‡®∏ ‡®∏‡®Æ‡©á‡®Ç ‡®ï‡©ã‡®à ‡®∏‡©Å‡®®‡©á‡®π‡©á ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®§ ‡®®‡®π‡©Ä‡®Ç ‡®π‡®®‡•§",
      pleaseEnterRecurring: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®á‡©±‡®ï ‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
      recurringStarted: "‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®π‡©ã‡®á‡®Ü: ",
      recurringCancelled: "‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ ‡®∞‡©±‡®¶ ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü",
      noActiveRecurring: "‡®∞‡©±‡®¶ ‡®ï‡®∞‡®® ‡®≤‡®à ‡®ï‡©ã‡®à ‡®∏‡®∞‡®ó‡®∞‡®Æ ‡®¶‡©Å‡®π‡®∞‡®æ‡®â‡®£ ‡®µ‡®æ‡®≤‡®æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à",
      daily: "‡®∞‡©ã‡®ú‡®º‡®æ‡®®‡®æ",
      weekly: "‡®π‡®´‡®§‡®æ‡®µ‡®æ‡®∞‡©Ä",
      monthly: "‡®Æ‡®π‡©Ä‡®®‡®æ‡®µ‡®æ‡®∞",
      invalidDateTime: "‡®Ö‡®µ‡©à‡®ß ‡®Æ‡®ø‡®§‡©Ä/‡®∏‡®Æ‡®æ‡®Ç ‡®´‡®æ‡®∞‡®Æ‡©à‡®ü‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á 'DD M YYYY HH MM' ‡®µ‡®∞‡®§‡©ã",
      pastDateTime: "‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®§ ‡®∏‡®Æ‡®æ‡®Ç ‡®Ö‡®§‡©Ä‡®§ ‡®µ‡®ø‡©±‡®ö ‡®π‡©à‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®≠‡®µ‡®ø‡©±‡®ñ ‡®¶‡®æ ‡®∏‡®Æ‡®æ‡®Ç ‡®ö‡©Å‡®£‡©ã‡•§",
      scheduledFor: "‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®á‡®∏ ‡®≤‡®à ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®§ ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü ",
      attemptingSend: "‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®≠‡©á‡®ú‡®£ ‡®¶‡©Ä ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞ ‡®∞‡®ø‡®π‡®æ ‡®π‡©à: ",
      errorSending: "‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®≠‡©á‡®ú‡®£ ‡®µ‡®ø‡©±‡®ö ‡®§‡®∞‡©Å‡©±‡®ü‡©Ä: ",
      messageSent: "‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®∏‡®´‡®≤‡®§‡®æ‡®™‡©Ç‡®∞‡®µ‡®ï ‡®≠‡©á‡®ú‡®ø‡®Ü ‡®ó‡®ø‡®Ü",
      language: "‡®≠‡®æ‡®∏‡®º‡®æ"
    },
    de: {
      enterMessage: "Geben Sie Ihre Nachricht ein",
      customSchedule: "Benutzerdefinierter Zeitplan (TT M JJJJ HH MM)",
      recurringMessage: "Wiederkehrende Nachricht",
      interval: "Intervall",
      schedule1m: "Planen (1m)",
      schedule5m: "Planen (5m)",
      schedule30m: "Planen (30m)",
      schedule1h: "Planen (1h)",
      customScheduleBtn: "‚è∞ Benutzerdefinierter Zeitplan",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ Wiederkehrend planen",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "Bitte geben Sie eine Nachricht ein",
      pleaseEnterBoth: "Bitte geben Sie sowohl eine Nachricht als auch eine benutzerdefinierte Planungszeit ein",
      allCancelled: "Alle geplanten Nachrichten wurden abgebrochen.",
      noScheduled: "Derzeit sind keine Nachrichten geplant.",
      pleaseEnterRecurring: "Bitte geben Sie eine wiederkehrende Nachricht ein",
      recurringStarted: "Wiederkehrender Zeitplan gestartet: ",
      recurringCancelled: "Wiederkehrender Zeitplan abgebrochen",
      noActiveRecurring: "Kein aktiver wiederkehrender Zeitplan zum Abbrechen",
      daily: "T√§glich",
      weekly: "W√∂chentlich",
      monthly: "Monatlich",
      invalidDateTime: "Ung√ºltiges Datum/Zeitformat. Bitte verwenden Sie 'TT M JJJJ HH MM'",
      pastDateTime: "Der angegebene Zeitpunkt liegt in der Vergangenheit. Bitte w√§hlen Sie einen zuk√ºnftigen Zeitpunkt.",
      scheduledFor: "Nachricht geplant f√ºr ",
      attemptingSend: "Versuch, Nachricht zu senden: ",
      errorSending: "Fehler beim Senden der Nachricht: ",
      messageSent: "Nachricht erfolgreich gesendet",
      language: "Sprache"
    },
    ru: {
      enterMessage: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      customSchedule: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–î–î –ú –ì–ì–ì–ì –ß–ß –ú–ú)",
      recurringMessage: "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ",
      interval: "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
      schedule1m: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (1–º)",
      schedule5m: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (5–º)",
      schedule30m: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (30–º)",
      schedule1h: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (1—á)",
      customScheduleBtn: "‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      pleaseEnterBoth: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
      allCancelled: "–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.",
      noScheduled: "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
      pleaseEnterRecurring: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ",
      recurringStarted: "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: ",
      recurringCancelled: "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
      noActiveRecurring: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã",
      daily: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
      weekly: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
      monthly: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ",
      invalidDateTime: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–î –ú –ì–ì–ì–ì –ß–ß –ú–ú'",
      pastDateTime: "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.",
      scheduledFor: "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ",
      attemptingSend: "–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ",
      errorSending: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ",
      messageSent: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      language: "–Ø–∑—ã–∫"
    },
    ar: {
      enterMessage: "ÿ£ÿØÿÆŸÑ ÿ±ÿ≥ÿßŸÑÿ™ŸÉ",
      customSchedule: "ÿ¨ÿØŸàŸÑ ŸÖÿÆÿµÿµ (DD M YYYY HH MM)",
      recurringMessage: "ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿ™ŸÉÿ±ÿ±ÿ©",
      interval: "ÿßŸÑŸÅÿßÿµŸÑ ÿßŸÑÿ≤ŸÖŸÜŸä",
      schedule1m: "ÿ¨ÿØŸàŸÑÿ© (1ÿØ)",
      schedule5m: "ÿ¨ÿØŸàŸÑÿ© (5ÿØ)",
      schedule30m: "ÿ¨ÿØŸàŸÑÿ© (30ÿØ)",
      schedule1h: "ÿ¨ÿØŸàŸÑÿ© (1ÿ≥)",
      customScheduleBtn: "‚è∞ ÿ¨ÿØŸàŸÑ ŸÖÿÆÿµÿµ",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ ÿ¨ÿØŸàŸÑÿ© ŸÖÿ™ŸÉÿ±ÿ±ÿ©",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ©",
      pleaseEnterBoth: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ŸÉŸÑ ŸÖŸÜ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸàŸàŸÇÿ™ ÿßŸÑÿ¨ÿØŸàŸÑÿ© ÿßŸÑŸÖÿÆÿµÿµ",
      allCancelled: "ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ¨ÿØŸàŸÑÿ©.",
      noScheduled: "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ±ÿ≥ÿßÿ¶ŸÑ ŸÖÿ¨ÿØŸàŸÑÿ© ÿ≠ÿßŸÑŸäŸãÿß.",
      pleaseEnterRecurring: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿ™ŸÉÿ±ÿ±ÿ©",
      recurringStarted: "ÿ®ÿØÿ£ ÿßŸÑÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±: ",
      recurringCancelled: "ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±",
      noActiveRecurring: "ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¨ÿØŸàŸÑ ŸÖÿ™ŸÉÿ±ÿ± ŸÜÿ¥ÿ∑ ŸÑŸÑÿ•ŸÑÿ∫ÿßÿ°",
      daily: "ŸäŸàŸÖŸä",
      weekly: "ÿ£ÿ≥ÿ®ŸàÿπŸä",
      monthly: "ÿ¥Ÿáÿ±Ÿä",
      invalidDateTime: "ÿ™ŸÜÿ≥ŸäŸÇ ÿ™ÿßÿ±ŸäÿÆ/ŸàŸÇÿ™ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ 'DD M YYYY HH MM'",
      pastDateTime: "ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖÿ≠ÿØÿØ ŸÅŸä ÿßŸÑŸÖÿßÿ∂Ÿä. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿÆÿ™Ÿäÿßÿ± ŸàŸÇÿ™ ŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸä.",
      scheduledFor: "ÿ™ŸÖ ÿ¨ÿØŸàŸÑÿ© ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÄ ",
      attemptingSend: "ŸÖÿ≠ÿßŸàŸÑÿ© ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©: ",
      errorSending: "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©: ",
      messageSent: "ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ®ŸÜÿ¨ÿßÿ≠",
      language: "ÿßŸÑŸÑÿ∫ÿ©"
    },
    fr: {
      enterMessage: "Entrez votre message",
      customSchedule: "Planification personnalis√©e (JJ M AAAA HH MM)",
      recurringMessage: "Message r√©current",
      interval: "Intervalle",
      schedule1m: "Planifier (1m)",
      schedule5m: "Planifier (5m)",
      schedule30m: "Planifier (30m)",
      schedule1h: "Planifier (1h)",
      customScheduleBtn: "‚è∞ Planification personnalis√©e",
      cancelAll: "‚ùå",
      startRecurring: "üîÅ Planifier r√©current",
      cancelRecurring: "‚ùå",
      pleaseEnterMessage: "Veuillez entrer un message",
      pleaseEnterBoth: "Veuillez entrer √† la fois un message et une heure de planification personnalis√©e",
      allCancelled: "Tous les messages planifi√©s ont √©t√© annul√©s.",
      noScheduled: "Aucun message n'est actuellement planifi√©.",
      pleaseEnterRecurring: "Veuillez entrer un message r√©current",
      recurringStarted: "Planification r√©currente commenc√©e : ",
      recurringCancelled: "Planification r√©currente annul√©e",
      noActiveRecurring: "Aucune planification r√©currente active √† annuler",
      daily: "Quotidien",
      weekly: "Hebdomadaire",
      monthly: "Mensuel",
      invalidDateTime: "Format de date/heure invalide. Veuillez utiliser 'JJ M AAAA HH MM'",
      pastDateTime: "L'heure sp√©cifi√©e est dans le pass√©. Veuillez choisir une heure future.",
      scheduledFor: "Message planifi√© pour ",
      attemptingSend: "Tentative d'envoi du message : ",
      errorSending: "Erreur lors de l'envoi du message : ",
      messageSent: "Message envoy√© avec succ√®s",
      language: "Langue"
    }
  };

  function t(key) {
    return translations[selectedLanguage][key] || translations['en'][key];
  }

  function displayMessage(message) {
    console.log(message);
    if (typeof shortToast === "function") {
      shortToast(message);
    } else {
      console.warn("shortToast is not available. Message:", message);
    }
  }

  function sendMessage(conversationId, message) {
    displayMessage(t("attemptingSend") + message);

    if (typeof messaging.sendChatMessage !== "function") {
      displayMessage(t("errorSending") + "messaging.sendChatMessage is not a function");
      return;
    }

    try {
      messaging.sendChatMessage(conversationId, message, function (error) {
        if (error) {
          displayMessage(t("errorSending") + JSON.stringify(error));
        } else {
          displayMessage(t("messageSent"));
        }
      });
    } catch (error) {
      displayMessage(t("errorSending") + JSON.stringify(error));
    }
  }

  function scheduleMessage(message, durationInMs) {
    var scheduledTime = Date.now() + durationInMs;
    scheduledMessages.push({ message: message, time: scheduledTime });
    displayMessage(t("scheduledFor") + new Date(scheduledTime).toString());

    setTimeout(function() {
      sendScheduledMessage(scheduledTime);
    }, durationInMs);
  }

  function scheduleCustomMessage(message, dateTimeString) {
    var parts = dateTimeString.split(" ");
    if (parts.length !== 5) {
      displayMessage(t("invalidDateTime"));
      return;
    }

    var targetDate = new Date(parts[2], parts[1] - 1, parts[0], parts[3], parts[4]);
    var now = new Date();
    var timeUntilSend = targetDate.getTime() - now.getTime();

    if (timeUntilSend <= 0) {
      displayMessage(t("pastDateTime"));
      return;
    }

    scheduledMessages.push({ message: message, time: targetDate.getTime() });
    displayMessage(t("scheduledFor") + targetDate.toString());

    setTimeout(function() {
      sendScheduledMessage(targetDate.getTime());
    }, timeUntilSend);
  }

  function sendScheduledMessage(scheduledTime) {
    var index = scheduledMessages.findIndex(msg => msg.time === scheduledTime);
    if (index !== -1) {
      var scheduledMsg = scheduledMessages[index];
      sendMessage(conversationId, scheduledMsg.message);
      scheduledMessages.splice(index, 1);
    }
  }

  function startRecurringSchedule() {
    isRecurringScheduleActive = true;
    config.set("conversationId", conversationId, true);
    config.setBoolean("isRecurringScheduleActive", true, true);
    config.set("recurringMessage", recurringMessage, true);
    config.set("recurringInterval", recurringInterval, true);
    config.setLong("nextRecurringTime", calculateNextRecurringTime(), true);
    displayMessage(t("recurringStarted") + recurringInterval);
  }

  function cancelRecurringSchedule() {
    if (isRecurringScheduleActive) {
      isRecurringScheduleActive = false;
      config.setBoolean("isRecurringScheduleActive", false, true);
      config.set("recurringMessage", "", true);
      config.set("recurringInterval", "daily", true);
      config.setLong("nextRecurringTime", 0, true);
      displayMessage(t("recurringCancelled"));
    } else {
      displayMessage(t("noActiveRecurring"));
    }
  }

  function calculateNextRecurringTime() {
    var now = new Date();
    var next = new Date(now);
    switch(recurringInterval) {
    case "daily":
      next.setDate(now.getDate() + 1);
      break;
    case "weekly":
      next.setDate(now.getDate() + 7);
      break;
    case "monthly":
      next.setMonth(now.getMonth() + 1);
      break;
  }
    return next.getTime();
  }

  function checkAndSendRecurringMessage() {
    if (isRecurringScheduleActive) {
      var currentTime = Date.now();
      var nextRecurringTime = config.getLong("nextRecurringTime", 0);

      console.log("Current time:", new Date(currentTime).toString());
      console.log("Next recurring time:", new Date(nextRecurringTime).toString());

      if (currentTime >= nextRecurringTime) {
        conversationId = config.get("conversationId");
        if (conversationId) {
          sendMessage(conversationId, config.get("recurringMessage", ""));
        
          var newNextRecurringTime = calculateNextRecurringTime();
          config.setLong("nextRecurringTime", newNextRecurringTime, true);
        
          console.log("Message sent. New next recurring time:", new Date(newNextRecurringTime).toString());
        } else {
          console.error("Error: conversationId not found for recurring message.");
      }
    } else {
        console.log("Not yet time to send recurring message.");
    }
  } else {
      console.log("Recurring schedule is not active.");
  }
}

  function createConversationToolboxUI() {
    im.create("conversationToolbox", function (builder, args) {
      try {
        conversationId = args["conversationId"];

        builder.textInput(t("enterMessage"), "", function (value) {
          inputMessage = value;
        }).singleLine(true);

        builder.row(function(rowBuilder) {
          rowBuilder.button(t("schedule1m"), function() {
            if (inputMessage.trim() !== "") {
              scheduleMessage(inputMessage, 60000);
            } else {
              displayMessage(t("pleaseEnterMessage"));
            }
          });

          rowBuilder.text(" ");

          rowBuilder.button(t("schedule5m"), function() {
            if (inputMessage.trim() !== "") {
              scheduleMessage(inputMessage, 300000);
            } else {
              displayMessage(t("pleaseEnterMessage"));
            }
          });
        });

        builder.row(function(rowBuilder) {
          rowBuilder.button(t("schedule30m"), function() {
            if (inputMessage.trim() !== "") {
              scheduleMessage(inputMessage, 1800000);
            } else {
              displayMessage(t("pleaseEnterMessage"));
            }
          });

          rowBuilder.text(" ");

          rowBuilder.button(t("schedule1h"), function() {
            if (inputMessage.trim() !== "") {
              scheduleMessage(inputMessage, 3600000);
            } else {
              displayMessage(t("pleaseEnterMessage"));
            }
          });
        });

        builder.textInput(t("customSchedule"), "", function (value) {
          customScheduleTime = value;
        }).singleLine(true);

        builder.row(function(rowBuilder) {
          rowBuilder.button(t("customScheduleBtn"), function() {
            if (inputMessage.trim() !== "" && customScheduleTime.trim() !== "") {
              scheduleCustomMessage(inputMessage, customScheduleTime);
            } else {
              displayMessage(t("pleaseEnterBoth"));
            }
          });

          rowBuilder.text(" ");

          rowBuilder.button(t("cancelAll"), function() {
            if (scheduledMessages.length > 0) {
              scheduledMessages = [];
              displayMessage(t("allCancelled"));
            } else {
              displayMessage(t("noScheduled"));
            }
          });
        });

        builder.textInput(t("recurringMessage"), "", function (value) {
          recurringMessage = value;
        }).singleLine(true);

        var intervals = [t("daily"), t("weekly"), t("monthly")];
        var intervalIndex = recurringInterval === "daily" ? 0 : (recurringInterval === "weekly" ? 1 : 2);

        builder.row(function(rowBuilder) {
          var intervalText = rowBuilder.text(t("interval") + ": " + intervals[intervalIndex]);
          rowBuilder.slider(0, 2, 3, intervalIndex, function(value) {
            switch(value) {
              case 0:
                recurringInterval = "daily";
                break;
              case 1:
                recurringInterval = "weekly";
                break;
              case 2:
                recurringInterval = "monthly";
                break;
            }
            intervalText.label(t("interval") + ": " + intervals[value]);
          });
        })
        .arrangement("spaceBetween")
        .fillMaxWidth()
        .padding(4);

        builder.row(function(rowBuilder) {
          rowBuilder.button(t("startRecurring"), function() {
            if (recurringMessage.trim() !== "") {
              startRecurringSchedule();
            } else {
              displayMessage(t("pleaseEnterRecurring"));
            }
          });

          rowBuilder.text(" ");

          rowBuilder.button(t("cancelRecurring"), function() {
            cancelRecurringSchedule();
          });
        });

        var languages = ["English", "Portuguese", "Punjabi", "German", "Russian", "Arabic", "French"];
        var languageCodes = ['en', 'pt', 'pa', 'de', 'ru', 'ar', 'fr'];
        var oldSelectedLanguage = config.get(selectedLanguageKey, 'en');
        var oldSelectedIndex = languageCodes.indexOf(oldSelectedLanguage);

        builder.row(function (builder) {
          var text = builder.text(t("language") + ": " + languages[oldSelectedIndex]);
          builder.slider(0, languages.length - 1, languages.length - 1, oldSelectedIndex, function (value) {
            var newLanguage = languageCodes[value];
            text.label(t("language") + ": " + languages[value]);
            config.set(selectedLanguageKey, newLanguage, true);
            selectedLanguage = newLanguage;
            createConversationToolboxUI();
          });
        })
        .arrangement("spaceBetween")
        .fillMaxWidth()
        .padding(4);

      } catch (error) {
        console.error("Error in createConversationToolboxUI: " + JSON.stringify(error));
      }
    });
  }

  function start() {
    createConversationToolboxUI();
  }

  start();

  module.onSnapMainActivityCreate = activity => {
    showAuthorStartupToast();
    isRecurringScheduleActive = config.getBoolean("isRecurringScheduleActive", false);
    recurringMessage = config.get("recurringMessage", "");
    recurringInterval = config.get("recurringInterval", "daily");

    checkAndSendRecurringMessage();
  };

})();
